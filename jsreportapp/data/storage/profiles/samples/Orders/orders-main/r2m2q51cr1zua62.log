{"type":"operationStart","subtype":"profile","data":{"_id":"lvjjh5wDQ538inHx","timestamp":"2024-01-11T20:15:00.336Z","state":"queued","mode":"standard","creationDate":"2024-01-11T20:15:00.337Z","modificationDate":"2024-01-11T20:15:00.337Z","shortid":"v8szVTa","$entitySet":"profiles"},"doDiffs":false,"timestamp":1705004100336,"id":"0p39nfj6no09lu4","previousOperationId":null,"operationId":"vx4trmec8m5svus"}
{"type":"log","level":"info","message":"Render request 22 queued for execution and waiting for available worker","previousOperationId":"vx4trmec8m5svus","timestamp":1705004100337,"id":"i5tof39daf2d2c3"}
{"type":"operationStart","subtype":"render","name":"orders-main","previousOperationId":"vx4trmec8m5svus","timestamp":1705004100342,"id":"rfi9nfu7etsc7xf","previousEventId":"0p39nfj6no09lu4","operationId":"qgozgqkx9wh7mrw"}
{"type":"log","timestamp":1705004100342,"level":"info","message":"Starting rendering request 22","meta":{"rootId":"r2m2q51cr1zua62","id":"r2m2q51cr1zua62"},"id":"hhsrh337wnldfh3","previousOperationId":"qgozgqkx9wh7mrw"}
{"type":"log","timestamp":1705004100342,"level":"info","message":"Rendering template { name: orders-main, recipe: chrome-pdf, engine: handlebars, preview: true }","meta":{"rootId":"r2m2q51cr1zua62","id":"r2m2q51cr1zua62"},"id":"p40hf0jmohbae0d","previousOperationId":"qgozgqkx9wh7mrw"}
{"type":"log","timestamp":1705004100342,"level":"debug","message":"Data item not defined for this template.","meta":{"rootId":"r2m2q51cr1zua62","id":"r2m2q51cr1zua62"},"id":"ntlbqts11bt2n2k","previousOperationId":"qgozgqkx9wh7mrw"}
{"type":"log","timestamp":1705004100343,"level":"debug","message":"Executing script orders-script (beforeRender)","meta":{"rootId":"r2m2q51cr1zua62","id":"r2m2q51cr1zua62"},"id":"dbfjnmxp2m9r33u","previousOperationId":"qgozgqkx9wh7mrw"}
{"type":"operationStart","subtype":"scriptsBeforeRender","name":"scripts beforeRender","timestamp":1705004100352,"id":"g27xfqzxp5a0kyq","previousEventId":"rfi9nfu7etsc7xf","operationId":"iv7xkqdl2bk2ssc","previousOperationId":"qgozgqkx9wh7mrw"}
{"type":"operationStart","subtype":"script","name":"scripts orders-script","previousOperationId":"iv7xkqdl2bk2ssc","timestamp":1705004100352,"id":"f7rgu71ra2qeujq","previousEventId":"g27xfqzxp5a0kyq","operationId":"6tqz7uo23xr77xd"}
{"type":"log","timestamp":1705004100354,"level":"warn","message":"Error when processing render request 22\n(because) error when evaluating custom script /samples/Orders/orders-script\nProtocol \"http:\" not supported. Expected \"https:\"\n\n(sandbox.js line 7:15)\n\n   5 | function fetchOrders() {\n   6 |     return new Promise((resolve, reject) => {\n>  7 |         https.get('http://localhost:3001/races',\n     |               ^\n   8 |         (result) => {\n   9 |             var str = '';\n  10 |             result.on('data', (b) => str += b);\n\n(sandbox.js line 6:12)\n\n  4 | // call remote http rest api\n  5 | function fetchOrders() {\n> 6 |     return new Promise((resolve, reject) => {\n    |            ^\n  7 |         https.get('http://localhost:3001/races',\n  8 |         (result) => {\n  9 |             var str = '';\n\n(sandbox.js line 19:26)\n\n  17 | // group the data for report\n  18 | async function prepareDataSource() {\n> 19 |     const orders = await fetchOrders()\n     |                          ^\n  20 |     const ordersByShipCountry = orders.reduce((a, v) => {\n  21 |         a[v.ShipCountry] = a[v.ShipCountry] || []\n  22 |         a[v.ShipCountry].push(v)\n\n(sandbox.js line 52:29)\n\n  50 | // add jsreport hook which modifies the report input data\n  51 | async function beforeRender(req, res) {\n> 52 |     req.data.orders = await prepareDataSource()\n     |                             ^\n  53 | }\n\n\nTypeError [ERR_INVALID_PROTOCOL]: Protocol \"http:\" not supported. Expected \"https:\"\n    at new NodeError (node:internal/errors:405:5)\n    at new ClientRequest (node:_http_client:188:11)\n    at request (node:https:358:10)\n    at Object.get (node:https:392:15)\n    at sandbox.js:7:15\n    at new Promise (<anonymous>)\n    at fetchOrders (sandbox.js:6:12)\n    at prepareDataSource (sandbox.js:19:26)\n    at Object.beforeRender (sandbox.js:52:29)\n    at executionFn (C:\\Users\\Daniel Mesa\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:67:35)","meta":{"rootId":"r2m2q51cr1zua62","id":"r2m2q51cr1zua62"},"id":"hns4mh3kcoeptc4","previousOperationId":"6tqz7uo23xr77xd"}
{"type":"log","timestamp":1705004100354,"level":"warn","message":"Rendering request 22 finished with error in 18 ms","meta":{"rootId":"r2m2q51cr1zua62","id":"r2m2q51cr1zua62"},"id":"yfkxikrqfxqi7qx","previousOperationId":"6tqz7uo23xr77xd"}
{"type":"error","timestamp":1705004100357,"code":"ERR_INVALID_PROTOCOL","statusCode":400,"weak":true,"decoratedSuffix":"\n\n(sandbox.js line 7:15)\n\n   5 | function fetchOrders() {\n   6 |     return new Promise((resolve, reject) => {\n>  7 |         https.get('http://localhost:3001/races',\n     |               ^\n   8 |         (result) => {\n   9 |             var str = '';\n  10 |             result.on('data', (b) => str += b);\n\n(sandbox.js line 6:12)\n\n  4 | // call remote http rest api\n  5 | function fetchOrders() {\n> 6 |     return new Promise((resolve, reject) => {\n    |            ^\n  7 |         https.get('http://localhost:3001/races',\n  8 |         (result) => {\n  9 |             var str = '';\n\n(sandbox.js line 19:26)\n\n  17 | // group the data for report\n  18 | async function prepareDataSource() {\n> 19 |     const orders = await fetchOrders()\n     |                          ^\n  20 |     const ordersByShipCountry = orders.reduce((a, v) => {\n  21 |         a[v.ShipCountry] = a[v.ShipCountry] || []\n  22 |         a[v.ShipCountry].push(v)\n\n(sandbox.js line 52:29)\n\n  50 | // add jsreport hook which modifies the report input data\n  51 | async function beforeRender(req, res) {\n> 52 |     req.data.orders = await prepareDataSource()\n     |                             ^\n  53 | }\n\n","entity":{"shortid":"BJX1Jw82ce","name":"orders-script","content":"// server side script fetching remote data and preparing report data source\nconst https = require('https');\n\n// call remote http rest api\nfunction fetchOrders() {\n    return new Promise((resolve, reject) => {\n        https.get('http://localhost:3001/races',\n        (result) => {\n            var str = '';\n            result.on('data', (b) => str += b);\n            result.on('error', reject);\n            result.on('end', () => resolve(JSON.parse(str).value));\n        });\n    })\n}\n\n// group the data for report\nasync function prepareDataSource() {\n    const orders = await fetchOrders()\n    const ordersByShipCountry = orders.reduce((a, v) => {\n        a[v.ShipCountry] = a[v.ShipCountry] || []\n        a[v.ShipCountry].push(v)\n        return a\n    }, {})\n\n    return Object.keys(ordersByShipCountry).map((country) => {\n        const ordersInCountry = ordersByShipCountry[country]\n\n        const accumulated = {}\n\n        ordersInCountry.forEach((o) => {\n            o.OrderDate = new Date(o.OrderDate);\n            const key = o.OrderDate.getFullYear() + '/' + (o.OrderDate.getMonth() + 1);\n            accumulated[key] = accumulated[key] || {\n                value: 0,\n                orderDate: o.OrderDate\n            };\n            accumulated[key].value++;\n        });\n\n        return {\n            rows: ordersInCountry,\n            country,\n            accumulated\n        }\n\n    }).slice(0, 2)\n}\n\n// add jsreport hook which modifies the report input data\nasync function beforeRender(req, res) {\n    req.data.orders = await prepareDataSource()\n}"},"property":"content","logged":true,"previousOperationId":"6tqz7uo23xr77xd","id":"426owdsyzq4xw94","stack":"TypeError [ERR_INVALID_PROTOCOL]: Protocol \"http:\" not supported. Expected \"https:\"\n    at new NodeError (node:internal/errors:405:5)\n    at new ClientRequest (node:_http_client:188:11)\n    at request (node:https:358:10)\n    at Object.get (node:https:392:15)\n    at sandbox.js:7:15\n    at new Promise (<anonymous>)\n    at fetchOrders (sandbox.js:6:12)\n    at prepareDataSource (sandbox.js:19:26)\n    at Object.beforeRender (sandbox.js:52:29)\n    at executionFn (C:\\Users\\Daniel Mesa\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:67:35)","message":"Error when evaluating custom script /samples/Orders/orders-script\nProtocol \"http:\" not supported. Expected \"https:\"\n\n(sandbox.js line 7:15)\n\n   5 | function fetchOrders() {\n   6 |     return new Promise((resolve, reject) => {\n>  7 |         https.get('http://localhost:3001/races',\n     |               ^\n   8 |         (result) => {\n   9 |             var str = '';\n  10 |             result.on('data', (b) => str += b);\n\n(sandbox.js line 6:12)\n\n  4 | // call remote http rest api\n  5 | function fetchOrders() {\n> 6 |     return new Promise((resolve, reject) => {\n    |            ^\n  7 |         https.get('http://localhost:3001/races',\n  8 |         (result) => {\n  9 |             var str = '';\n\n(sandbox.js line 19:26)\n\n  17 | // group the data for report\n  18 | async function prepareDataSource() {\n> 19 |     const orders = await fetchOrders()\n     |                          ^\n  20 |     const ordersByShipCountry = orders.reduce((a, v) => {\n  21 |         a[v.ShipCountry] = a[v.ShipCountry] || []\n  22 |         a[v.ShipCountry].push(v)\n\n(sandbox.js line 52:29)\n\n  50 | // add jsreport hook which modifies the report input data\n  51 | async function beforeRender(req, res) {\n> 52 |     req.data.orders = await prepareDataSource()\n     |                             ^\n  53 | }\n\n"}
