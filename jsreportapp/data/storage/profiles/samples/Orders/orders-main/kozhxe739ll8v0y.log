{"type":"operationStart","subtype":"profile","data":{"_id":"MbpsLoQ0Lq4OeNJV","timestamp":"2024-01-11T20:12:42.791Z","state":"queued","mode":"standard","creationDate":"2024-01-11T20:12:42.792Z","modificationDate":"2024-01-11T20:12:42.792Z","shortid":"fDqO0Me","$entitySet":"profiles"},"doDiffs":false,"timestamp":1705003962792,"id":"ts4xz6clh916h9f","previousOperationId":null,"operationId":"b5pzbu4f7r05srk"}
{"type":"log","level":"info","message":"Render request 19 queued for execution and waiting for available worker","previousOperationId":"b5pzbu4f7r05srk","timestamp":1705003962792,"id":"0tiany1jdvc3wkl"}
{"type":"operationStart","subtype":"render","name":"orders-main","previousOperationId":"b5pzbu4f7r05srk","timestamp":1705003962797,"id":"z7x0vuspj5y5h55","previousEventId":"ts4xz6clh916h9f","operationId":"4hmd6uw7t1j2uz8"}
{"type":"log","timestamp":1705003962797,"level":"info","message":"Starting rendering request 19","meta":{"rootId":"kozhxe739ll8v0y","id":"kozhxe739ll8v0y"},"id":"fpjtjjny9jf8z61","previousOperationId":"4hmd6uw7t1j2uz8"}
{"type":"log","timestamp":1705003962797,"level":"info","message":"Rendering template { name: orders-main, recipe: chrome-pdf, engine: handlebars, preview: true }","meta":{"rootId":"kozhxe739ll8v0y","id":"kozhxe739ll8v0y"},"id":"amyk1yyaj9bus4g","previousOperationId":"4hmd6uw7t1j2uz8"}
{"type":"log","timestamp":1705003962798,"level":"debug","message":"Data item not defined for this template.","meta":{"rootId":"kozhxe739ll8v0y","id":"kozhxe739ll8v0y"},"id":"igo1qae3jf8hluj","previousOperationId":"4hmd6uw7t1j2uz8"}
{"type":"log","timestamp":1705003962799,"level":"debug","message":"Executing script orders-script (beforeRender)","meta":{"rootId":"kozhxe739ll8v0y","id":"kozhxe739ll8v0y"},"id":"bnjop8w1ubpraxe","previousOperationId":"4hmd6uw7t1j2uz8"}
{"type":"operationStart","subtype":"scriptsBeforeRender","name":"scripts beforeRender","timestamp":1705003962808,"id":"n9d7wxc9vr1wsta","previousEventId":"z7x0vuspj5y5h55","operationId":"ajbze32h2kmpk9u","previousOperationId":"4hmd6uw7t1j2uz8"}
{"type":"operationStart","subtype":"script","name":"scripts orders-script","previousOperationId":"ajbze32h2kmpk9u","timestamp":1705003962808,"id":"16d12pqjgcrpgie","previousEventId":"n9d7wxc9vr1wsta","operationId":"57wd111aeo3cq3z"}
{"type":"log","timestamp":1705003962811,"level":"warn","message":"Error when processing render request 19\n(because) error when evaluating custom script /samples/Orders/orders-script\nProtocol \"mongodb:\" not supported. Expected \"https:\"\n\n(sandbox.js line 7:15)\n\n   5 | function fetchRaces() {\n   6 |     return new Promise((resolve, reject) => {\n>  7 |         https.get('mongodb://localhost:3001/mitca/races', (result) => {\n     |               ^\n   8 |             let data = '';\n   9 |\n  10 |             // A chunk of data has been received.\n\n(sandbox.js line 6:12)\n\n  4 | // call remote http rest api\n  5 | function fetchRaces() {\n> 6 |     return new Promise((resolve, reject) => {\n    |            ^\n  7 |         https.get('mongodb://localhost:3001/mitca/races', (result) => {\n  8 |             let data = '';\n  9 |\n\n(sandbox.js line 32:25)\n\n  30 | // group the data for report\n  31 | async function prepareDataSource() {\n> 32 |     const races = await fetchRaces()\n     |                         ^\n  33 |     const racesByCountry = races.reduce((a, v) => {\n  34 |         a[v.country] = a[v.country] || []\n  35 |         a[v.country].push(v)\n\n(sandbox.js line 66:29)\n\n  64 | // add jsreport hook which modifies the report input data\n  65 | async function beforeRender(req, res) {\n> 66 |     req.data.orders = await prepareDataSource()\n     |                             ^\n  67 | }\n  68 |\n\n\nTypeError [ERR_INVALID_PROTOCOL]: Protocol \"mongodb:\" not supported. Expected \"https:\"\n    at new NodeError (node:internal/errors:405:5)\n    at new ClientRequest (node:_http_client:188:11)\n    at request (node:https:358:10)\n    at Object.get (node:https:392:15)\n    at sandbox.js:7:15\n    at new Promise (<anonymous>)\n    at fetchRaces (sandbox.js:6:12)\n    at prepareDataSource (sandbox.js:32:25)\n    at Object.beforeRender (sandbox.js:66:29)\n    at executionFn (C:\\Users\\Daniel Mesa\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:67:35)","meta":{"rootId":"kozhxe739ll8v0y","id":"kozhxe739ll8v0y"},"id":"1t5tc7wejf9xjnn","previousOperationId":"57wd111aeo3cq3z"}
{"type":"log","timestamp":1705003962811,"level":"warn","message":"Rendering request 19 finished with error in 20 ms","meta":{"rootId":"kozhxe739ll8v0y","id":"kozhxe739ll8v0y"},"id":"ec8ledz2m4h0i2p","previousOperationId":"57wd111aeo3cq3z"}
{"type":"error","timestamp":1705003962813,"code":"ERR_INVALID_PROTOCOL","statusCode":400,"weak":true,"decoratedSuffix":"\n\n(sandbox.js line 7:15)\n\n   5 | function fetchRaces() {\n   6 |     return new Promise((resolve, reject) => {\n>  7 |         https.get('mongodb://localhost:3001/mitca/races', (result) => {\n     |               ^\n   8 |             let data = '';\n   9 |\n  10 |             // A chunk of data has been received.\n\n(sandbox.js line 6:12)\n\n  4 | // call remote http rest api\n  5 | function fetchRaces() {\n> 6 |     return new Promise((resolve, reject) => {\n    |            ^\n  7 |         https.get('mongodb://localhost:3001/mitca/races', (result) => {\n  8 |             let data = '';\n  9 |\n\n(sandbox.js line 32:25)\n\n  30 | // group the data for report\n  31 | async function prepareDataSource() {\n> 32 |     const races = await fetchRaces()\n     |                         ^\n  33 |     const racesByCountry = races.reduce((a, v) => {\n  34 |         a[v.country] = a[v.country] || []\n  35 |         a[v.country].push(v)\n\n(sandbox.js line 66:29)\n\n  64 | // add jsreport hook which modifies the report input data\n  65 | async function beforeRender(req, res) {\n> 66 |     req.data.orders = await prepareDataSource()\n     |                             ^\n  67 | }\n  68 |\n\n","entity":{"shortid":"BJX1Jw82ce","name":"orders-script","content":"// server side script fetching remote data and preparing report data source\nconst https = require('https');\n\n// call remote http rest api\nfunction fetchRaces() {\n    return new Promise((resolve, reject) => {\n        https.get('mongodb://localhost:3001/mitca/races', (result) => {\n            let data = '';\n\n            // A chunk of data has been received.\n            result.on('data', (chunk) => {\n                data += chunk;\n            });\n\n            // The whole response has been received.\n            result.on('end', () => {\n                try {\n                    const races = JSON.parse(data);\n                    resolve(races);\n                } catch (error) {\n                    reject(error);\n                }\n            });\n        }).on('error', (error) => {\n            reject(error);\n        });\n    });\n}\n\n// group the data for report\nasync function prepareDataSource() {\n    const races = await fetchRaces()\n    const racesByCountry = races.reduce((a, v) => {\n        a[v.country] = a[v.country] || []\n        a[v.country].push(v)\n        return a\n    }, {})\n\n    return Object.keys(racesByCountry).map((country) => {\n        const racesInCountry = racesByCountry[country]\n\n        const accumulated = {}\n\n        racesInCountry.forEach((r) => {\n            // Adjust property names based on your actual data structure\n            r.eventDate = new Date(r.eventDate);\n            const key = r.eventDate.getFullYear() + '/' + (r.eventDate.getMonth() + 1);\n            accumulated[key] = accumulated[key] || {\n                value: 0,\n                eventDate: r.eventDate\n            };\n            accumulated[key].value++;\n        });\n\n        return {\n            rows: racesInCountry,\n            country,\n            accumulated\n        }\n\n    }).slice(0, 2)\n}\n\n// add jsreport hook which modifies the report input data\nasync function beforeRender(req, res) {\n    req.data.orders = await prepareDataSource()\n}\n"},"property":"content","logged":true,"previousOperationId":"57wd111aeo3cq3z","id":"coje6fc6itpxcfs","stack":"TypeError [ERR_INVALID_PROTOCOL]: Protocol \"mongodb:\" not supported. Expected \"https:\"\n    at new NodeError (node:internal/errors:405:5)\n    at new ClientRequest (node:_http_client:188:11)\n    at request (node:https:358:10)\n    at Object.get (node:https:392:15)\n    at sandbox.js:7:15\n    at new Promise (<anonymous>)\n    at fetchRaces (sandbox.js:6:12)\n    at prepareDataSource (sandbox.js:32:25)\n    at Object.beforeRender (sandbox.js:66:29)\n    at executionFn (C:\\Users\\Daniel Mesa\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:67:35)","message":"Error when evaluating custom script /samples/Orders/orders-script\nProtocol \"mongodb:\" not supported. Expected \"https:\"\n\n(sandbox.js line 7:15)\n\n   5 | function fetchRaces() {\n   6 |     return new Promise((resolve, reject) => {\n>  7 |         https.get('mongodb://localhost:3001/mitca/races', (result) => {\n     |               ^\n   8 |             let data = '';\n   9 |\n  10 |             // A chunk of data has been received.\n\n(sandbox.js line 6:12)\n\n  4 | // call remote http rest api\n  5 | function fetchRaces() {\n> 6 |     return new Promise((resolve, reject) => {\n    |            ^\n  7 |         https.get('mongodb://localhost:3001/mitca/races', (result) => {\n  8 |             let data = '';\n  9 |\n\n(sandbox.js line 32:25)\n\n  30 | // group the data for report\n  31 | async function prepareDataSource() {\n> 32 |     const races = await fetchRaces()\n     |                         ^\n  33 |     const racesByCountry = races.reduce((a, v) => {\n  34 |         a[v.country] = a[v.country] || []\n  35 |         a[v.country].push(v)\n\n(sandbox.js line 66:29)\n\n  64 | // add jsreport hook which modifies the report input data\n  65 | async function beforeRender(req, res) {\n> 66 |     req.data.orders = await prepareDataSource()\n     |                             ^\n  67 | }\n  68 |\n\n"}
