{"type":"operationStart","subtype":"profile","data":{"_id":"KKJZj2Gm46SXqFZv","timestamp":"2024-01-11T20:14:36.159Z","state":"queued","mode":"standard","creationDate":"2024-01-11T20:14:36.160Z","modificationDate":"2024-01-11T20:14:36.160Z","shortid":"H2N8-va","$entitySet":"profiles"},"doDiffs":false,"timestamp":1705004076159,"id":"h1qcct6dtjqdjnn","previousOperationId":null,"operationId":"qeyd0nt85wgqmvs"}
{"type":"log","level":"info","message":"Render request 21 queued for execution and waiting for available worker","previousOperationId":"qeyd0nt85wgqmvs","timestamp":1705004076160,"id":"rej72kq2wub2pxc"}
{"type":"operationStart","subtype":"render","name":"orders-main","previousOperationId":"qeyd0nt85wgqmvs","timestamp":1705004076164,"id":"2bcr6awe7383irm","previousEventId":"h1qcct6dtjqdjnn","operationId":"ikut913e8kwxfj8"}
{"type":"log","timestamp":1705004076164,"level":"info","message":"Starting rendering request 21","meta":{"rootId":"onqjgfsh09lnrb3","id":"onqjgfsh09lnrb3"},"id":"fc96b3ijj9bguzb","previousOperationId":"ikut913e8kwxfj8"}
{"type":"log","timestamp":1705004076165,"level":"info","message":"Rendering template { name: orders-main, recipe: chrome-pdf, engine: handlebars, preview: true }","meta":{"rootId":"onqjgfsh09lnrb3","id":"onqjgfsh09lnrb3"},"id":"ou6flv1wno14gbn","previousOperationId":"ikut913e8kwxfj8"}
{"type":"log","timestamp":1705004076165,"level":"debug","message":"Data item not defined for this template.","meta":{"rootId":"onqjgfsh09lnrb3","id":"onqjgfsh09lnrb3"},"id":"6q0wwwk0v98k01r","previousOperationId":"ikut913e8kwxfj8"}
{"type":"log","timestamp":1705004076167,"level":"debug","message":"Executing script orders-script (beforeRender)","meta":{"rootId":"onqjgfsh09lnrb3","id":"onqjgfsh09lnrb3"},"id":"li00lxcckegm9l1","previousOperationId":"ikut913e8kwxfj8"}
{"type":"operationStart","subtype":"scriptsBeforeRender","name":"scripts beforeRender","timestamp":1705004076174,"id":"51q070jqeej6fob","previousEventId":"2bcr6awe7383irm","operationId":"c9n7rgq910m7qg6","previousOperationId":"ikut913e8kwxfj8"}
{"type":"operationStart","subtype":"script","name":"scripts orders-script","previousOperationId":"c9n7rgq910m7qg6","timestamp":1705004076174,"id":"kvyavw8jvqykc28","previousEventId":"51q070jqeej6fob","operationId":"ietyrxikn6h8arq"}
{"type":"log","timestamp":1705004076176,"level":"warn","message":"Error when processing render request 21\n(because) error when evaluating custom script /samples/Orders/orders-script\nProtocol \"http:\" not supported. Expected \"https:\"\n\n(sandbox.js line 7:15)\n\n   5 | function fetchOrders() {\n   6 |     return new Promise((resolve, reject) => {\n>  7 |         https.get('http://localhost:3001/mitca/races',\n     |               ^\n   8 |         (result) => {\n   9 |             var str = '';\n  10 |             result.on('data', (b) => str += b);\n\n(sandbox.js line 6:12)\n\n  4 | // call remote http rest api\n  5 | function fetchOrders() {\n> 6 |     return new Promise((resolve, reject) => {\n    |            ^\n  7 |         https.get('http://localhost:3001/mitca/races',\n  8 |         (result) => {\n  9 |             var str = '';\n\n(sandbox.js line 19:26)\n\n  17 | // group the data for report\n  18 | async function prepareDataSource() {\n> 19 |     const orders = await fetchOrders()\n     |                          ^\n  20 |     const ordersByShipCountry = orders.reduce((a, v) => {\n  21 |         a[v.ShipCountry] = a[v.ShipCountry] || []\n  22 |         a[v.ShipCountry].push(v)\n\n(sandbox.js line 52:29)\n\n  50 | // add jsreport hook which modifies the report input data\n  51 | async function beforeRender(req, res) {\n> 52 |     req.data.orders = await prepareDataSource()\n     |                             ^\n  53 | }\n\n\nTypeError [ERR_INVALID_PROTOCOL]: Protocol \"http:\" not supported. Expected \"https:\"\n    at new NodeError (node:internal/errors:405:5)\n    at new ClientRequest (node:_http_client:188:11)\n    at request (node:https:358:10)\n    at Object.get (node:https:392:15)\n    at sandbox.js:7:15\n    at new Promise (<anonymous>)\n    at fetchOrders (sandbox.js:6:12)\n    at prepareDataSource (sandbox.js:19:26)\n    at Object.beforeRender (sandbox.js:52:29)\n    at executionFn (C:\\Users\\Daniel Mesa\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:67:35)","meta":{"rootId":"onqjgfsh09lnrb3","id":"onqjgfsh09lnrb3"},"id":"qa181g578wlq3h3","previousOperationId":"ietyrxikn6h8arq"}
{"type":"log","timestamp":1705004076176,"level":"warn","message":"Rendering request 21 finished with error in 17 ms","meta":{"rootId":"onqjgfsh09lnrb3","id":"onqjgfsh09lnrb3"},"id":"5ktgnl8q8e6isqy","previousOperationId":"ietyrxikn6h8arq"}
{"type":"error","timestamp":1705004076180,"code":"ERR_INVALID_PROTOCOL","statusCode":400,"weak":true,"decoratedSuffix":"\n\n(sandbox.js line 7:15)\n\n   5 | function fetchOrders() {\n   6 |     return new Promise((resolve, reject) => {\n>  7 |         https.get('http://localhost:3001/mitca/races',\n     |               ^\n   8 |         (result) => {\n   9 |             var str = '';\n  10 |             result.on('data', (b) => str += b);\n\n(sandbox.js line 6:12)\n\n  4 | // call remote http rest api\n  5 | function fetchOrders() {\n> 6 |     return new Promise((resolve, reject) => {\n    |            ^\n  7 |         https.get('http://localhost:3001/mitca/races',\n  8 |         (result) => {\n  9 |             var str = '';\n\n(sandbox.js line 19:26)\n\n  17 | // group the data for report\n  18 | async function prepareDataSource() {\n> 19 |     const orders = await fetchOrders()\n     |                          ^\n  20 |     const ordersByShipCountry = orders.reduce((a, v) => {\n  21 |         a[v.ShipCountry] = a[v.ShipCountry] || []\n  22 |         a[v.ShipCountry].push(v)\n\n(sandbox.js line 52:29)\n\n  50 | // add jsreport hook which modifies the report input data\n  51 | async function beforeRender(req, res) {\n> 52 |     req.data.orders = await prepareDataSource()\n     |                             ^\n  53 | }\n\n","entity":{"shortid":"BJX1Jw82ce","name":"orders-script","content":"// server side script fetching remote data and preparing report data source\nconst https = require('https');\n\n// call remote http rest api\nfunction fetchOrders() {\n    return new Promise((resolve, reject) => {\n        https.get('http://localhost:3001/mitca/races',\n        (result) => {\n            var str = '';\n            result.on('data', (b) => str += b);\n            result.on('error', reject);\n            result.on('end', () => resolve(JSON.parse(str).value));\n        });\n    })\n}\n\n// group the data for report\nasync function prepareDataSource() {\n    const orders = await fetchOrders()\n    const ordersByShipCountry = orders.reduce((a, v) => {\n        a[v.ShipCountry] = a[v.ShipCountry] || []\n        a[v.ShipCountry].push(v)\n        return a\n    }, {})\n\n    return Object.keys(ordersByShipCountry).map((country) => {\n        const ordersInCountry = ordersByShipCountry[country]\n\n        const accumulated = {}\n\n        ordersInCountry.forEach((o) => {\n            o.OrderDate = new Date(o.OrderDate);\n            const key = o.OrderDate.getFullYear() + '/' + (o.OrderDate.getMonth() + 1);\n            accumulated[key] = accumulated[key] || {\n                value: 0,\n                orderDate: o.OrderDate\n            };\n            accumulated[key].value++;\n        });\n\n        return {\n            rows: ordersInCountry,\n            country,\n            accumulated\n        }\n\n    }).slice(0, 2)\n}\n\n// add jsreport hook which modifies the report input data\nasync function beforeRender(req, res) {\n    req.data.orders = await prepareDataSource()\n}"},"property":"content","logged":true,"previousOperationId":"ietyrxikn6h8arq","id":"1ovdedl0iron4gu","stack":"TypeError [ERR_INVALID_PROTOCOL]: Protocol \"http:\" not supported. Expected \"https:\"\n    at new NodeError (node:internal/errors:405:5)\n    at new ClientRequest (node:_http_client:188:11)\n    at request (node:https:358:10)\n    at Object.get (node:https:392:15)\n    at sandbox.js:7:15\n    at new Promise (<anonymous>)\n    at fetchOrders (sandbox.js:6:12)\n    at prepareDataSource (sandbox.js:19:26)\n    at Object.beforeRender (sandbox.js:52:29)\n    at executionFn (C:\\Users\\Daniel Mesa\\jsreportapp\\node_modules\\@jsreport\\jsreport-scripts\\lib\\executeScript.js:67:35)","message":"Error when evaluating custom script /samples/Orders/orders-script\nProtocol \"http:\" not supported. Expected \"https:\"\n\n(sandbox.js line 7:15)\n\n   5 | function fetchOrders() {\n   6 |     return new Promise((resolve, reject) => {\n>  7 |         https.get('http://localhost:3001/mitca/races',\n     |               ^\n   8 |         (result) => {\n   9 |             var str = '';\n  10 |             result.on('data', (b) => str += b);\n\n(sandbox.js line 6:12)\n\n  4 | // call remote http rest api\n  5 | function fetchOrders() {\n> 6 |     return new Promise((resolve, reject) => {\n    |            ^\n  7 |         https.get('http://localhost:3001/mitca/races',\n  8 |         (result) => {\n  9 |             var str = '';\n\n(sandbox.js line 19:26)\n\n  17 | // group the data for report\n  18 | async function prepareDataSource() {\n> 19 |     const orders = await fetchOrders()\n     |                          ^\n  20 |     const ordersByShipCountry = orders.reduce((a, v) => {\n  21 |         a[v.ShipCountry] = a[v.ShipCountry] || []\n  22 |         a[v.ShipCountry].push(v)\n\n(sandbox.js line 52:29)\n\n  50 | // add jsreport hook which modifies the report input data\n  51 | async function beforeRender(req, res) {\n> 52 |     req.data.orders = await prepareDataSource()\n     |                             ^\n  53 | }\n\n"}
